{"remainingRequest":"C:\\Users\\jingguanran\\Desktop\\mscodevue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\jingguanran\\Desktop\\mscodevue\\src\\views\\personaloa\\finishedtask.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\jingguanran\\Desktop\\mscodevue\\src\\views\\personaloa\\finishedtask.vue","mtime":1596417159352},{"path":"C:\\Users\\jingguanran\\Desktop\\mscodevue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jingguanran\\Desktop\\mscodevue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\jingguanran\\Desktop\\mscodevue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jingguanran\\Desktop\\mscodevue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IHF1ZXJ5UGVyc29uYWxUYXNrLCBnZXRIaWdoTGlnaHRlZFByb2Nlc3NEaWFncmFtIH0gZnJvbSAnQC9hcGkvYWN0aXZpdGknCmltcG9ydCB3YXZlcyBmcm9tICdAL2RpcmVjdGl2ZS93YXZlcycgLy8gd2F2ZXMgZGlyZWN0aXZlCmltcG9ydCBQYWdpbmF0aW9uIGZyb20gJ0AvY29tcG9uZW50cy9QYWdpbmF0aW9uJyAvLyBzZWNvbmRhcnkgcGFja2FnZSBiYXNlZCBvbiBlbC1wYWdpbmF0aW9uCgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0ZpbmlzaGVkVGFzaycsCiAgY29tcG9uZW50czogeyBQYWdpbmF0aW9uIH0sCiAgZGlyZWN0aXZlczogeyB3YXZlcyB9LAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB0YWJsZUtleTogMCwKICAgICAgbGlzdDogW10sCiAgICAgIHRvdGFsOiAwLAogICAgICBsaXN0TG9hZGluZzogdHJ1ZSwKICAgICAgbGlzdFF1ZXJ5OiB7CiAgICAgICAgY3VycmVudFBhZ2U6IDEsCiAgICAgICAgcGFnZVNpemU6IDEwLAogICAgICAgIHRhc2tTdGF0dXM6ICdmaW5pc2hlZCcsCiAgICAgICAgdGFza05hbWU6IHVuZGVmaW5lZAogICAgICB9LAogICAgICB0ZW1wOiB7CiAgICAgICAgaWQ6IHVuZGVmaW5lZAogICAgICB9LAogICAgICB0cmFja0RpYWxvZ1Zpc2libGU6IGZhbHNlLAogICAgICBzdmdTcmM6ICcnCiAgICB9CiAgfSwKICBjcmVhdGVkKCkgewogICAgdGhpcy5nZXRMaXN0KCkKICB9LAogIG1ldGhvZHM6IHsKICAgIGdldExpc3QoKSB7CiAgICAgIHRoaXMubGlzdExvYWRpbmcgPSB0cnVlCiAgICAgIHF1ZXJ5UGVyc29uYWxUYXNrKHRoaXMubGlzdFF1ZXJ5KS50aGVuKHJlc3BvbnNlID0+IHsKICAgICAgICB0aGlzLmxpc3QgPSByZXNwb25zZS5kYXRhLmxpc3QKICAgICAgICB0aGlzLnRvdGFsID0gcmVzcG9uc2UuZGF0YS5wYWdpbmF0aW9uLnRvdGFsCiAgICAgICAgdGhpcy5saXN0TG9hZGluZyA9IGZhbHNlCiAgICAgIH0pCiAgICB9LAogICAgaGFuZGxlRmlsdGVyKCkgewogICAgICB0aGlzLmxpc3RRdWVyeS5jdXJyZW50UGFnZSA9IDEKICAgICAgdGhpcy5nZXRMaXN0KCkKICAgIH0sCiAgICBoYW5kbGVSZXNldCgpIHsKICAgICAgdGhpcy5saXN0UXVlcnkudGFza05hbWUgPSAnJwogICAgICB0aGlzLmhhbmRsZUZpbHRlcigpCiAgICB9LAogICAgaGFuZGxlVHJhY2socm93KSB7CiAgICAgIGdldEhpZ2hMaWdodGVkUHJvY2Vzc0RpYWdyYW0ocm93LnByb2Nlc3NJbnN0YW5jZUlkKS50aGVuKHJlc3BvbnNlID0+IHsKICAgICAgICBpZiAocmVzcG9uc2UubWVzc2FnZSA9PT0gJ3N1Y2Nlc3MnKSB7CiAgICAgICAgICB0aGlzLnN2Z1NyYyA9IHJlc3BvbnNlLmRhdGEKICAgICAgICAgIHRoaXMudHJhY2tEaWFsb2dWaXNpYmxlID0gdHJ1ZQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLnN2Z1NyYyA9ICcnCiAgICAgICAgICB0aGlzLmhhbmRsZVdhcm5pbmcocmVzcG9uc2UpCiAgICAgICAgfQogICAgICB9KQogICAgfSwKICAgIGhhbmRsZVdhcm5pbmcocmVzcG9uc2UpIHsKICAgICAgdGhpcy4kbm90aWZ5KHsKICAgICAgICB0aXRsZTogdGhpcy4kdCgnY29tbW9uLndhcm5pbmcnKSwKICAgICAgICBtZXNzYWdlOiByZXNwb25zZS5tZXNzYWdlLAogICAgICAgIHR5cGU6ICd3YXJuaW5nJywKICAgICAgICBkdXJhdGlvbjogMjAwMAogICAgICB9KQogICAgfQogIH0KfQo="},{"version":3,"sources":["finishedtask.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"finishedtask.vue","sourceRoot":"src/views/personaloa","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <el-input v-model=\"listQuery.taskName\" :placeholder=\"$t('task.name')\" clearable style=\"width: 200px;\" class=\"filter-item\" @keyup.enter.native=\"handleFilter\" />\n      <el-button v-waves class=\"filter-item\" type=\"primary\" icon=\"el-icon-search\" @click=\"handleFilter\">\n        {{ $t('common.query') }}\n      </el-button>\n      <el-button v-waves class=\"filter-item\" type=\"primary\" icon=\"el-icon-refresh-right\" @click=\"handleReset\">\n        {{ $t('common.reset') }}\n      </el-button>\n    </div>\n\n    <el-table\n      :key=\"tableKey\"\n      v-loading=\"listLoading\"\n      :data=\"list\"\n      border\n      fit\n      highlight-current-row\n      style=\"width: 100%;\"\n    >\n      <el-table-column :label=\"$t('process.processDefinitionName')\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.processDefinitionName }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('process.processInstanceName')\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.processInstanceName }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('task.name')\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.name }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('task.startTime')\" min-width=\"100px\" prop=\"startTime\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.taskLocalVariables.startTime | parseTime('{y}-{m}-{d} {h}:{i}:{s}') }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('task.endTime')\" min-width=\"100px\" prop=\"endTime\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.taskLocalVariables.endTime | parseTime('{y}-{m}-{d} {h}:{i}:{s}') }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('task.description')\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.taskLocalVariables.description }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('common.operate')\" min-width=\"130px\" align=\"center\" class-name=\"small-padding fixed-width\">\n        <template slot-scope=\"{row}\">\n          <el-button type=\"primary\" size=\"mini\" style=\"margin-right: 5px\" @click=\"handleTrack(row)\">\n            {{ $t('process.track') }}\n          </el-button>\n          <router-link :to=\"{path: '/personaloa/mytaskdetails', query: { processInstanceId: row.processInstanceId, processDefinitionName: row.processDefinitionName, processInstanceName: row.processInstanceName, name: row.name, startTime: row.taskLocalVariables.startTime, endTime: row.taskLocalVariables.endTime, description: row.taskLocalVariables.description } }\">\n            <el-button type=\"primary\" size=\"mini\">\n              {{ $t('process.details') }}\n            </el-button>\n          </router-link>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <pagination v-show=\"total>0\" :total=\"total\" :page.sync=\"listQuery.currentPage\" :limit.sync=\"listQuery.pageSize\" @pagination=\"getList\" />\n\n    <el-dialog fullscreen :visible.sync=\"trackDialogVisible\">\n      <div v-html=\"svgSrc\" />\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { queryPersonalTask, getHighLightedProcessDiagram } from '@/api/activiti'\nimport waves from '@/directive/waves' // waves directive\nimport Pagination from '@/components/Pagination' // secondary package based on el-pagination\n\nexport default {\n  name: 'FinishedTask',\n  components: { Pagination },\n  directives: { waves },\n  data() {\n    return {\n      tableKey: 0,\n      list: [],\n      total: 0,\n      listLoading: true,\n      listQuery: {\n        currentPage: 1,\n        pageSize: 10,\n        taskStatus: 'finished',\n        taskName: undefined\n      },\n      temp: {\n        id: undefined\n      },\n      trackDialogVisible: false,\n      svgSrc: ''\n    }\n  },\n  created() {\n    this.getList()\n  },\n  methods: {\n    getList() {\n      this.listLoading = true\n      queryPersonalTask(this.listQuery).then(response => {\n        this.list = response.data.list\n        this.total = response.data.pagination.total\n        this.listLoading = false\n      })\n    },\n    handleFilter() {\n      this.listQuery.currentPage = 1\n      this.getList()\n    },\n    handleReset() {\n      this.listQuery.taskName = ''\n      this.handleFilter()\n    },\n    handleTrack(row) {\n      getHighLightedProcessDiagram(row.processInstanceId).then(response => {\n        if (response.message === 'success') {\n          this.svgSrc = response.data\n          this.trackDialogVisible = true\n        } else {\n          this.svgSrc = ''\n          this.handleWarning(response)\n        }\n      })\n    },\n    handleWarning(response) {\n      this.$notify({\n        title: this.$t('common.warning'),\n        message: response.message,\n        type: 'warning',\n        duration: 2000\n      })\n    }\n  }\n}\n</script>\n"]}]}