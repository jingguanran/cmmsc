{"remainingRequest":"C:\\Users\\jingguanran\\Desktop\\mscodevue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\jingguanran\\Desktop\\mscodevue\\src\\views\\permission\\role.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\jingguanran\\Desktop\\mscodevue\\src\\views\\permission\\role.vue","mtime":1596417159072},{"path":"C:\\Users\\jingguanran\\Desktop\\mscodevue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\jingguanran\\Desktop\\mscodevue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jingguanran\\Desktop\\mscodevue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}