<template>
  <div class="app-container">
    <div class="filter-container">
      <el-input v-model="listQuery.username" :placeholder="$t('sysuser.username')" clearable style="width: 200px;" class="filter-item" @keyup.enter.native="handleFilter" />
      <el-select v-model="listQuery.status" :placeholder="$t('sysuser.status')" clearable style="width: 200px" class="filter-item">
        <el-option v-for="item in statusOptions" :key="item.key" :label="item.display_name" :value="item.key" />
      </el-select>
      <el-button v-waves class="filter-item" type="primary" icon="el-icon-search" @click="handleFilter">
        {{ $t('common.query') }}
      </el-button>
      <el-button v-waves class="filter-item" type="primary" icon="el-icon-refresh-right" @click="handleReset">
        {{ $t('common.reset') }}
      </el-button>
      <el-button class="filter-item" style="margin-left: 10px;" type="primary" icon="el-icon-plus" @click="handleCreate">
        {{ $t('common.add') }}
      </el-button>
      <el-button v-waves :loading="downloadLoading" class="filter-item" type="primary" icon="el-icon-download" @click="handleDownload">
        {{ $t('common.export') }}
      </el-button>
    </div>

    <el-table
      :key="tableKey"
      v-loading="listLoading"
      :data="list"
      border
      fit
      highlight-current-row
      style="width: 100%;"
      @sort-change="sortChange"
    >
      <el-table-column :label="$t('sysuser.username')">
        <template slot-scope="{row}">
          <span>{{ row.username }}</span>
        </template>
      </el-table-column>
      <el-table-column :label="$t('sysuser.nickname')">
        <template slot-scope="{row}">
          <span>{{ row.nickname }}</span>
        </template>
      </el-table-column>
      <el-table-column :label="$t('sysuser.mobile')">
        <template slot-scope="{row}">
          <span>{{ row.mobile }}</span>
        </template>
      </el-table-column>
      <el-table-column :label="$t('sysuser.roleId')">
        <template slot-scope="{row}">
          <span>{{ row.roleIdCn }}</span>
        </template>
      </el-table-column>
      <el-table-column :label="$t('sysuser.orgId')">
        <template slot-scope="{row}">
          <span>{{ row.orgIdCn }}</span>
        </template>
      </el-table-column>
      <el-table-column :label="$t('common.create-time')" min-width="100px" prop="createTime" sortable="custom" :class-name="getSortClass('createTime')">
        <template slot-scope="{row}">
          <span>{{ row.createTime | parseTime('{y}-{m}-{d} {h}:{i}:{s}') }}</span>
        </template>
      </el-table-column>
      <el-table-column :label="$t('sysuser.status')" class-name="status-col">
        <template slot-scope="{row}">
          <el-tag :type="row.status | statusFilter">
            <span v-if="row.status === 1">{{ $t('common.able') }}</span>
            <span v-else>{{ $t('common.disable') }}</span>
          </el-tag>
        </template>
      </el-table-column>
      <el-table-column :label="$t('common.operate')" min-width="100px" align="center" class-name="small-padding fixed-width">
        <template slot-scope="{row,$index}">
          <el-button type="primary" size="mini" style="margin-right: 5px" @click="handleUpdate(row)">
            {{ $t('common.edit') }}
          </el-button>
          <el-popover :ref="'popover-' + row.id" placement="top" width="160" :title="$t('common.confirm-delete')" trigger="click">
            <div style="text-align: right; margin: 0">
              <el-button size="mini" @click="$refs[`popover-` + row.id].doClose()">{{ $t('common.cancel') }}</el-button>
              <el-button type="primary" size="mini" @click="$refs[`popover-` + row.id].doClose();handleDelete(row,$index)">{{ $t('common.confirm') }}</el-button>
            </div>
            <el-button slot="reference" type="danger" size="mini">
              {{ $t('common.delete') }}
            </el-button>
          </el-popover>
        </template>
      </el-table-column>
    </el-table>

    <pagination v-show="total>0" :total="total" :page.sync="listQuery.currentPage" :limit.sync="listQuery.pageSize" @pagination="getList" />

    <el-dialog :title="textMap[dialogStatus]" :visible.sync="dialogFormVisible">
      <el-form ref="dataForm" :rules="rules" :model="temp" label-position="right" label-width="90px" style="width: 100%">
        <el-form-item :label="$t('sysuser.username')" prop="username">
          <el-input v-model="temp.username" :placeholder="$t('common.enter')" :disabled="dialogStatus==='update'" minlength="3" maxlength="64" clearable />
        </el-form-item>
        <el-form-item v-if="dialogStatus==='create'" :label="$t('sysuser.password')" prop="password">
          <el-input v-model="temp.password" :placeholder="$t('common.enter')" show-password minlength="6" maxlength="31" clearable />
        </el-form-item>
        <el-form-item :label="$t('sysuser.email')" prop="email">
          <el-input v-model="temp.email" :placeholder="$t('common.enter')" maxlength="100" clearable />
        </el-form-item>
        <el-form-item :label="$t('sysuser.mobile')" prop="mobile">
          <el-input v-model="temp.mobile" :placeholder="$t('common.enter')" class="input-with-select" maxlength="20" clearable>
            <el-select slot="prepend" v-model="temp.prefix" :placeholder="$t('common.choose')" style="width: 90px">
              <el-option label="+86" value="86" />
              <el-option label="+87" value="87" />
            </el-select>
          </el-input>
        </el-form-item>
        <el-form-item :label="$t('sysuser.roleId')" prop="roleId">
          <el-select v-model="temp.roleId" :placeholder="$t('common.choose')" clearable class="filter-item" style="width: 100%">
            <el-option v-for="item in roleIdOptions" :key="item.value" :label="item.name" :value="item.value" />
          </el-select>
        </el-form-item>
        <el-form-item :label="$t('sysuser.orgId')" prop="orgId">
          <el-select ref="selectOrgId" v-model="temp.orgId" :placeholder="$t('common.choose')" style="width: 100%" clearable @clear="handleClearOrgId">
            <el-option :key="temp.orgId" hidden :value="temp.orgId" :label="orgName" />
            <el-tree :data="orgIdOptions" :props="{label: 'title'}" :expand-on-click-node="false" :check-on-click-node="true" @node-click="handleNodeClickOrgId" />
          </el-select>
        </el-form-item>
        <el-form-item :label="$t('sysuser.status')" prop="status">
          <el-radio-group v-model="temp.status">
            <el-radio :label="1">{{ $t('common.able') }}</el-radio>
            <el-radio :label="0">{{ $t('common.disable') }}</el-radio>
          </el-radio-group>
        </el-form-item>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="dialogFormVisible = false">
          {{ $t('common.cancel') }}
        </el-button>
        <el-button type="primary" @click="dialogStatus==='create'?createData():updateData()">
          {{ $t('common.confirm') }}
        </el-button>
      </div>
    </el-dialog>
  </div>
</template>

<script>
import { querySysUser, addSysUser, updateSysUser, queryRoleName, querySysOrgTree, deleteSysUser } from '@/api/admin'
import waves from '@/directive/waves' // waves directive
import { parseTime } from '@/utils'
import Pagination from '@/components/Pagination' // secondary package based on el-pagination

export default {
  name: 'SysUser',
  components: { Pagination },
  directives: { waves },
  filters: {
    statusFilter(status) {
      const statusMap = {
        1: 'success',
        0: 'danger'
      }
      return statusMap[status]
    }
  },
  data() {
    return {
      tableKey: 0,
      list: [],
      total: 0,
      listLoading: true,
      listQuery: {
        currentPage: 1,
        pageSize: 10,
        username: undefined,
        status: undefined,
        sorter: 'createTime_descend'
      },
      roleIdOptions: [],
      orgIdOptions: [],
      orgName: '',
      statusOptions: [
        { key: '1', display_name: this.$t('common.able') },
        { key: '0', display_name: this.$t('common.disable') }
      ],
      temp: {
        id: undefined,
        status: 1,
        prefix: '86'
      },
      dialogFormVisible: false,
      dialogStatus: '',
      textMap: {
        update: this.$t('common.edit'),
        create: this.$t('common.add')
      },
      rules: {
        username: [{ required: true, validator: this.checkUsername, trigger: ['blur', 'change'] }],
        password: [{ required: true, validator: this.checkPassword, trigger: ['blur', 'change'] }],
        email: [{ required: true, message: this.$t('sysuser.email-required'), trigger: 'blur' }, { type: 'email', message: this.$t('sysuser.email-format'), trigger: ['blur', 'change'] }],
        mobile: [{ required: true, validator: this.checkMobile, trigger: ['blur', 'change'] }],
        roleId: [{ required: true, message: this.$t('sysuser.roleId-required'), trigger: 'change' }],
        orgId: [{ required: true, message: this.$t('sysuser.orgId-required'), trigger: 'change' }],
        status: [{ required: true, message: this.$t('sysuser.status-required'), trigger: 'change' }]
      },
      downloadLoading: false
    }
  },
  created() {
    this.getList()
  },
  methods: {
    getList() {
      this.listLoading = true
      querySysUser(this.listQuery).then(response => {
        this.list = response.data.list
        this.total = response.data.pagination.total
        this.listLoading = false
      })
      queryRoleName().then(response => {
        this.roleIdOptions = response.data
      })
      querySysOrgTree().then(response => {
        this.orgIdOptions = response.data.list
      })
    },
    handleFilter() {
      this.listQuery.currentPage = 1
      this.getList()
    },
    handleReset() {
      this.listQuery.username = ''
      this.listQuery.status = ''
      this.handleFilter()
    },
    sortChange(data) {
      const { prop, order } = data
      if (prop === 'createTime') {
        this.sortByCreateTime(order)
      }
    },
    sortByCreateTime(order) {
      if (order === 'ascending') {
        this.listQuery.sorter = 'createTime_ascend'
      } else {
        this.listQuery.sorter = 'createTime_descend'
      }
      this.handleFilter()
    },
    resetTemp() {
      this.temp = {
        id: undefined,
        status: 1,
        prefix: '86'
      }
    },
    handleCreate() {
      this.resetTemp()
      this.orgName = ''
      this.dialogStatus = 'create'
      this.dialogFormVisible = true
      this.$nextTick(() => {
        this.$refs['dataForm'].clearValidate()
      })
    },
    createData() {
      if (this.$refs.selectOrgId.value) {
        this.validateOrgId()
      }
      this.$refs['dataForm'].validate((valid) => {
        if (valid) {
          addSysUser(this.temp).then(response => {
            if (response.message === 'success') {
              this.list.unshift(this.temp)
              this.dialogFormVisible = false
              this.$notify({
                title: this.$t('common.success'),
                message: this.$t('common.add-success'),
                type: 'success',
                duration: 2000
              })
              this.handleReset()
            } else {
              this.handleWarning(response)
            }
          })
        }
      })
    },
    handleUpdate(row) {
      this.temp = Object.assign({}, row) // copy obj
      this.orgName = this.temp.orgIdCn
      this.dialogStatus = 'update'
      this.dialogFormVisible = true
      this.$nextTick(() => {
        this.$refs['dataForm'].clearValidate()
      })
    },
    updateData() {
      if (this.$refs.selectOrgId.value) {
        this.validateOrgId()
      }
      this.$refs['dataForm'].validate((valid) => {
        if (valid) {
          // const tempData = Object.assign({}, this.temp)
          const tempData = {}
          tempData.id = this.temp.id
          tempData.username = this.temp.username
          tempData.email = this.temp.email
          tempData.mobile = this.temp.mobile
          tempData.prefix = this.temp.prefix
          tempData.roleId = this.temp.roleId
          tempData.orgId = this.temp.orgId
          tempData.status = this.temp.status
          updateSysUser(tempData).then(response => {
            if (response.message === 'success') {
              const index = this.list.findIndex(v => v.id === this.temp.id)
              this.list.splice(index, 1, this.temp)
              this.dialogFormVisible = false
              this.$notify({
                title: this.$t('common.success'),
                message: this.$t('common.edit-success'),
                type: 'success',
                duration: 2000
              })
              this.handleReset()
            } else {
              this.handleWarning(response)
            }
          })
        }
      })
    },
    handleDelete(row, index) {
      deleteSysUser(row.id).then(response => {
        if (response.message === 'success') {
          this.$notify({
            title: this.$t('common.success'),
            message: this.$t('common.delete-success'),
            type: 'success',
            duration: 2000
          })
          this.list.splice(index, 1)
          this.handleReset()
        } else {
          this.handleWarning(response)
        }
      })
    },
    handleDownload() {
      this.downloadLoading = true
      import('@/vendor/Export2Excel').then(excel => {
        const tHeader = [this.$t('sysuser.username'), this.$t('sysuser.nickname'), this.$t('sysuser.mobile'), this.$t('sysuser.roleId'), this.$t('sysuser.orgId'), this.$t('sysuser.status'), this.$t('common.create-time')]
        const filterVal = ['username', 'nickname', 'mobile', 'roleIdCn', 'orgIdCn', 'status', 'createTime']
        const data = this.formatJson(filterVal)
        excel.export_json_to_excel({
          header: tHeader,
          data,
          filename: this.$t('route.sysuser')
        })
        this.downloadLoading = false
      })
    },
    formatJson(filterVal) {
      return this.list.map(v => filterVal.map(j => {
        if (j === 'createTime') {
          return parseTime(v[j])
        } else if (j === 'status') {
          if (v[j] === 1) {
            return this.$t('common.able')
          } else {
            return this.$t('common.disable')
          }
        } else {
          return v[j]
        }
      }))
    },
    getSortClass: function(key) {
      const sorter = this.listQuery.sorter
      return sorter === `${key}_ascend` ? 'ascending' : 'descending'
    },
    handleWarning(response) {
      this.$notify({
        title: this.$t('common.warning'),
        message: response.message,
        type: 'warning',
        duration: 2000
      })
    },
    checkUsername(rule, value, callback) {
      if (!value) {
        return callback(new Error(this.$t('sysuser.username-required')))
      } else {
        if (value.length > 2 && value.length < 65) {
          callback()
        } else {
          return callback(new Error(this.$t('sysuser.username-length')))
        }
      }
    },
    checkPassword(rule, value, callback) {
      if (!value) {
        return callback(new Error(this.$t('sysuser.password-required')))
      } else {
        if (value.length > 5 && value.length < 32) {
          callback()
        } else {
          return callback(new Error(this.$t('sysuser.password-length')))
        }
      }
    },
    checkMobile(rule, value, callback) {
      if (!value) {
        return callback(new Error(this.$t('sysuser.mobile-required')))
      } else {
        const reg = /^1\d{10}$/
        if (reg.test(value)) {
          callback()
        } else {
          return callback(new Error(this.$t('sysuser.mobile-format')))
        }
      }
    },
    validateOrgId() {
      this.$nextTick(() => {
        this.$refs['dataForm'].clearValidate('orgId')
      })
    },
    handleNodeClickOrgId(data) {
      this.orgName = data.title
      this.temp.orgId = data.id
      this.$refs.selectOrgId.blur()
      this.validateOrgId()
    },
    handleClearOrgId() {
      this.orgName = ''
      this.temp.orgId = ''
    }
  }
}
</script>
<style>
  .input-with-select .el-input-group__prepend {
    background-color: #fff;
  }
</style>
